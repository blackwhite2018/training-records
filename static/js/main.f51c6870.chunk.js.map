{"version":3,"sources":["components/TrainingRecords/Form/Form.jsx","components/TrainingRecords/TableData/Row/Data/Data.jsx","components/TrainingRecords/TableData/Row/Row.jsx","components/TrainingRecords/TableData/TableData.jsx","components/TrainingRecords/TrainingRecords.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Form","handleAddRecord","editRecord","updateRecord","useState","date","number","field","setField","handleChange","target","name","value","useEffect","className","onSubmit","evt","preventDefault","htmlFor","type","placeholder","id","onChange","defaultProps","Data","data","handleOption","handleClick","dataset","change","split","reverse","join","data-change","onClick","Row","TableData","records","headersIds","map","header","_id","shortid","generate","recordsIds","record","key","TrainingRecords","setRecords","setEditRecord","dateRev","position","forEach","index","copyRecords","Number","push","sort","a","b","option","prevValue","filter","item","removeRecord","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f51c6870.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Form = ({ handleAddRecord, editRecord, updateRecord }) => {\r\n    const [field, setField] = useState({\r\n        date: '',\r\n        number: 0\r\n    });\r\n\r\n    const { date, number } = field;\r\n\r\n    const handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        handleAddRecord({\r\n            date: date,\r\n            number: number\r\n        });\r\n        setField({\r\n            date: '',\r\n            number: 0\r\n        });\r\n    };\r\n\r\n    const handleChange = ({ target }) => {\r\n        setField({\r\n            ...field,\r\n            [target.name]: target.value\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (editRecord !== null) {\r\n            setField(editRecord);\r\n            updateRecord();\r\n        }\r\n    });\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={handleSubmit}>\r\n            <div className=\"form__group\">\r\n                <label htmlFor=\"date\" className=\"form__label\">Дата (дд.мм.гг)</label>\r\n                <input\r\n                    type=\"date\"\r\n                    name=\"date\"\r\n                    className=\"form__input\"\r\n                    placeholder=\"Ввести дату\"\r\n                    id=\"date\"\r\n                    onChange={handleChange}\r\n                    value={date}\r\n                ></input>\r\n            </div>\r\n            <div className=\"form__group\">\r\n                <label htmlFor=\"number\" className=\"form__label\">Пройдено км</label>\r\n                <input\r\n                    onChange={handleChange}\r\n                    type=\"number\"\r\n                    name=\"number\"\r\n                    className=\"form__input\"\r\n                    placeholder=\"Ввести пройденное расстояние\"\r\n                    id=\"number\"\r\n                    value={number}\r\n                ></input>\r\n            </div >\r\n            <input type=\"submit\" className=\"form__submit\" value=\"Ок\" />\r\n        </form >\r\n    );\r\n};\r\n\r\nForm.defaultProps = {\r\n    editRecord: null\r\n};\r\n\r\nForm.propTypes = {\r\n    props: PropTypes.shape({\r\n        handleAddRecord: PropTypes.func.isRequired,\r\n        updateRecord: PropTypes.func.isRequired\r\n    })\r\n};\r\n\r\nexport default Form;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Data = ({ data: { date, number }, handleOption }) => {\r\n    const handleClick = ({ target }) => {\r\n        handleOption(date, target.dataset.change);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <td className=\"tbody__data\">{date.split('.').reverse().join('.')}</td>\r\n            <td className=\"tbody__data\">{number}</td>\r\n            <td className=\"tbody__data\">\r\n                <button data-change=\"edit\" onClick={handleClick}>edit</button>\r\n                <button data-change=\"rm\" onClick={handleClick}>remove</button>\r\n            </td>\r\n        </>\r\n    );\r\n};\r\n\r\nData.propTypes = {\r\n    props: PropTypes.shape({\r\n        data: PropTypes.shape({\r\n            date: PropTypes.string.isRequired,\r\n            number: PropTypes.number.isRequired\r\n        })\r\n    })\r\n}\r\n\r\nexport default Data;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Data from './Data/Data';\r\n\r\nconst Row = ({ data, handleOption }) => {\r\n    return (\r\n        <tr>\r\n            <Data\r\n                data={data}\r\n                handleOption={handleOption}\r\n            />\r\n        </tr>\r\n    )\r\n};\r\n\r\nRow.propTypes = {\r\n    props: PropTypes.shape({\r\n        data: PropTypes.object.isRequired,\r\n        handleOption: PropTypes.func.isRequired\r\n    })\r\n}\r\n\r\nexport default Row;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\nimport Row from './Row/Row';\r\n\r\nconst TableData = ({ records, handleOption }) => {\r\n    const headers = ['Дата (дд.мм.гг)', 'Пройдено км', 'Действия'];\r\n\r\n    const headersIds = headers.map(header => (\r\n        {\r\n            _id: shortid.generate(),\r\n            value: header\r\n        }\r\n    ));\r\n\r\n    const recordsIds = records.map(record => (\r\n        {\r\n            _id: shortid.generate(),\r\n            ...record\r\n        }\r\n    ));\r\n\r\n    return (\r\n        <table className=\"table\">\r\n            <thead className=\"thead\">\r\n                <tr className=\"table__row\">\r\n                    {\r\n                        headersIds.map(({ _id, value }) => (\r\n                            <th className=\"thead__data\" key={_id}>{value}</th>\r\n                        ))\r\n                    }\r\n                </tr>\r\n            </thead>\r\n            <tbody className=\"tbody\">\r\n                {\r\n                    recordsIds.map(({ _id, date, number }) => {\r\n                        return (\r\n                            <Row\r\n                                key={_id}\r\n                                data={{ date, number }}\r\n                                handleOption={handleOption}\r\n                            />\r\n                        );\r\n                    })\r\n                }\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nTableData.propTypes = {\r\n    props: PropTypes.shape({\r\n        records: PropTypes.array.isRequired\r\n    })\r\n};\r\n\r\nexport default TableData;\r\n\r\n","import React, { useState } from 'react';\r\nimport Form from './Form/Form';\r\nimport TableData from './TableData/TableData';\r\nimport './TrainingRecords.css';\r\n\r\nconst TrainingRecords = () => {\r\n    const [records, setRecords] = useState([]);\r\n    const [editRecord, setEditRecord] = useState(null);\r\n\r\n    const handleAddRecord = ({ date, number }) => {\r\n        const dateRev = date.split('.').reverse().join('.');\r\n\r\n        let position = -1;\r\n        records.forEach((record, index) => {\r\n            if (record.date === dateRev) {\r\n                position = index;\r\n            }\r\n        });\r\n\r\n        let copyRecords = [...records];\r\n\r\n        if (position !== -1) {\r\n            copyRecords[position].number += Number(number);\r\n        } else {\r\n            copyRecords.push({ date, number: Number(number) });\r\n        }\r\n\r\n        copyRecords.sort((a, b) => a.date < b.date ? 1 : -1);\r\n\r\n        setRecords(copyRecords);\r\n    };\r\n\r\n    const removeRecord = date => {\r\n        setRecords(prevValue => {\r\n            return [...prevValue].filter(item => item.date !== date);\r\n        });\r\n    };\r\n\r\n    const updateRecord = record => {\r\n        setEditRecord(null);\r\n    };\r\n\r\n    const handleOption = (date, option) => {\r\n        switch (option) {\r\n            case 'edit':\r\n                let position = -1;\r\n\r\n                records.forEach((record, index) => {\r\n                    if (record.date === date) {\r\n                        position = index;\r\n                    }\r\n                });\r\n\r\n                setEditRecord(records[position]);\r\n                break;\r\n            case 'rm':\r\n                removeRecord(date);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Form\r\n                handleAddRecord={handleAddRecord}\r\n                editRecord={editRecord}\r\n                updateRecord={updateRecord}\r\n            />\r\n            <TableData\r\n                records={records}\r\n                handleOption={handleOption}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TrainingRecords;\r\n\r\n","import React from 'react';\r\nimport TrainingRecords from './components/TrainingRecords/TrainingRecords';\r\n\r\nconst App = () => (\r\n    <TrainingRecords />\r\n);\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}